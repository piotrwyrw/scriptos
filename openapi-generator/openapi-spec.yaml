openapi: 3.1.0
info:
  title: Scriptos API
  description: The API Specification for the Scriptos Backend
  version: 1.0.0
servers:
  - url: http://localhost:8080
    description: Local development

paths:
  /register:
    post:
      operationId: userRegister
      summary: Register a new Scriptos user
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/registerRequest"
      responses:
        200:
          description: OK

  /login:
    post:
      operationId: userLogin
      summary: Login as an existing Scriptos user
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/loginRequest"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/loginResponse"

  /drop:
    post:
      operationId: dropSession
      summary: Invalidate session server-side
      tags:
        - User
      responses:
        200:
          description: OK

  /edit:
    post:
      operationId: editUser
      summary: Edit user data
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/userEditRequest"
      responses:
        200:
          description: OK

  /secured:
    get:
      operationId: securedRoute
      summary: A sample secured route for testing token validity
      tags:
        - Security
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/basicUserDataResponse"
        403:
          description: Forbidden

  /secured/admin:
    get:
      operationId: securedAdminRoute
      summary: A secured route that requires that the user is an admin
      tags:
        - Security
      responses:
        200:
          description: OK
        403:
          description: Forbidden

  /group:
    post:
      operationId: createGroup
      summary: Create a new Scriptos group
      tags:
        - Groups
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createGroupRequest"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/groupIdResponse"
    get:
      operationId: retrieveGroups
      summary: Retrieve all groups viewable by the user
      tags:
        - Groups
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/groupListingResponse"


  /group/user:
    post:
      operationId: addUserToGroup
      summary: Add a user to an existing Scriptos group
      tags:
        - Groups
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/addUserToGroupRequest"
      responses:
        200:
          description: OK
    delete:
      operationId: deleteUserFromGroup
      summary: Delete a user from a group they are currently in
      tags:
        - Groups
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/removeUserFromGroupRequest"
      responses:
        200:
          description: OK

  /group/leave:
    post:
      operationId: leaveGroup
      summary: Leave a group as the logged-in user
      tags:
        - Groups
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/leaveGroupRequest"
      responses:
        200:
          description: OK

  /group/{name}:
    get:
      operationId: getAllDocuments
      summary: Get all documents of the given group
      tags:
        - Document
      parameters:
        - in: path
          name: name
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/documentListingResponse"

  /document:
    post:
      operationId: documentUpload
      summary: Create and upload a new document
      tags:
        - Document
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/documentUploadRequest"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/monitoringIdResponse"

  /monitor/{id}:
    get:
      operationId: retrieveMonitorContent
      summary: Get the last value of the monitor with the given ID
      tags:
        - Monitoring
      parameters:
        - in: path
          name: id
          required: true
          description: The monitor ID to query
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/monitorResponse"

  /stats/disk:
    get:
      operationId: getDiskUsage
      summary: Get the currently used number of bytes by the doc storage
      tags:
        - Statistics
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/diskUsageResponse"


components:
  schemas:
    registerRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
        password:
          type: string

    loginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
        password:
          type: string

    loginResponse:
      type: object
      required:
        - token
        - username
      properties:
        token:
          type: string
        username:
          type: string

    errorResponse:
      type: object
      properties:
        message:
          type: string
        code:
          type: string

    createGroupRequest:
      type: object
      required:
        - name
        - description
      properties:
        name:
          type: string
        description:
          type: string

    groupIdResponse:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          format: uuid

    addUserToGroupRequest:
      type: object
      required:
        - username
        - groupName
      properties:
        username:
          type: string
        groupName:
          type: string

    removeUserFromGroupRequest:
      type: object
      required:
        - username
        - groupName
      properties:
        username:
          type: string
        groupName:
          type: string

    leaveGroupRequest:
      type: object
      required:
        - groupName
      properties:
        groupName:
          type: string

    groupListingResponse:
      type: array
      items:
        type: object
        required:
          - name
          - description
          - admin
        properties:
          name:
            type: string
          description:
            type: string
          admin:
            type: boolean

    userEditRequest:
      type: object
      properties:
        newPassword:
          type: string

    documentUploadRequest:
      type: object
      required:
        - title
        - description
        - group
        - filename
      properties:
        title:
          type: string
        description:
          type: string
        group:
          type: string
          format: string
        filename:
          type: string
          format: binary

    monitoringIdResponse:
      type: object
      required:
        - monitorId
      properties:
        monitorId:
          type: string
          format: uuid

    monitorResponse:
      type: object
      required:
        - monitor
        - content
        - done
      properties:
        monitor:
          type: string
          format: uuid
        content:
          type: string
        done:
          type: boolean

    diskUsageResponse:
      type: object
      required:
        - bytes
      properties:
        bytes:
          type: integer
          format: int64

    documentListingResponse:
      type: array
      items:
        type: object
        required:
          - id
          - title
          - description
          - extension
          - author
          - byteSize
        properties:
          id:
            type: string
            format: uuid
          title:
            type: string
          description:
            type: string
          extension:
            type: string
          author:
            type: string
          byteSize:
            type: integer
            format: int64

    basicUserDataResponse:
      type: object
      required:
        - username
      properties:
        username:
          type: string

